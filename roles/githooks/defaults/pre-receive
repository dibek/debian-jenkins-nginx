#!/bin/bash
#
# pre-receive hook for Commit Check
#

COMPANY_EMAIL="ennov.com"

readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))

check_single_commit()
{
  COMMIT_CHECK_STATUS=0
  RELEASE_STATUS=0
  REVIEW_STATUS=0
  #
  # Put here any logic you want for your commit
  #
  # COMMIT_MESSAGE contains commit message
  # COMMIT_AUTHOR contains commit author (without email)
  #
  # Set COMMIT_CHECK_STATUS to non zero to indicate an error
  # Only run this script for the master branch. You can remove this
  # if block if you wish to run it for others as well.

    check_commit_message
    check_master_branch
    check_dev_branch

}

check_commit_message() {

    echo "Commit message: $COMMIT_MESSAGE"
    if [[ ${#COMMIT_MESSAGE} < 15 ]]; then
        COMMIT_CHECK_STATUS=1
        echo "message too short"
    fi
}

check_master_branch() {

	echo "Checking if it is master"
    if [[ $REFNAME = "refs/heads/master" ]]; then
		echo "Master branch checking tag: $TAG_INFO"
        if [[ "$TAG_INFO" == *"PA"* ]]; then
          RELEASE_STATUS=1
			echo "Release tag present"
        fi
    fi
}

check_dev_branch() {
	echo "Checking if it is dev"
    if [[ $REFNAME = "refs/heads/dev" ]]; then
		echo "Master branch checking tag: $TAG_INFO"
       if [[ "$TAG_INFO" == *"REVIEW"* ]]; then
          REVIEW_STATUS=1
          echo "found review tag"
       fi
    fi
}

check_review_present() {
     if [[ $REFNAME = "refs/heads/dev" ]] ; then
      if [ "$REVIEW_STATUS" != "1" ]; then
        echo "Commit validation (Review tag missing) failed for commit $REVISION" >&2
        exit 1
      fi
    fi
}

check_release_present() {
	if [[ $REFNAME = "refs/heads/master" ]] ; then
      if [ "$RELEASE_STATUS" != "1" ]; then
        echo "Commit validation (Release tag missing) failed for commit $REVISION" >&2
        exit 1
      fi
    fi
}

check_all_commits()
{
  REVISIONS=$(git rev-list $OLD_REVISION..$NEW_REVISION)
  IFS='\n' read -ra LIST_OF_REVISIONS <<< "$REVISIONS"

  for rid in "${!LIST_OF_REVISIONS[@]}"; do


	echo "Refname: $REFNAME"
    REVISION=${LIST_OF_REVISIONS[rid]}
	echo "Checking revision $REVISION "
    COMMIT_MESSAGE=$(git cat-file commit $REVISION | sed '1,/^$/d')
    COMMIT_AUTHOR=$(git cat-file commit $REVISION | grep committer | sed 's/^.* \([^@ ]\+@[^ ]\+\) \?.*$/\1/' | sed 's/<//' | sed 's/>//' | sed 's/@$COMPANY_EMAIL//')
    TAG_INFO=$(git name-rev $REVISION )
    echo "Tag info extracted: $TAG_INFO"

    check_single_commit


    if [ "$COMMIT_CHECK_STATUS" != "0" ]; then
      echo "Commit validation failed for commit $REVISION" >&2
      exit 1
    fi

  done






}

# Get custom commit message format
while read OLD_REVISION NEW_REVISION REFNAME ; do
  check_all_commits
  check_review_present
  check_release_present
done

exit 0
